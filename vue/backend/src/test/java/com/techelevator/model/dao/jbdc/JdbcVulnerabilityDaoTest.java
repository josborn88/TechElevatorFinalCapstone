package com.techelevator.model.dao.jbdc;

import java.util.Date;
import java.util.List;

import org.junit.*;
import org.springframework.jdbc.core.JdbcTemplate;

import com.techelevator.model.DAOIntegrationTest;
import com.techelevator.model.Vulnerability;
import com.techelevator.model.dao.jdbc.JdbcVulnerabilityDao;
import com.techelevator.model.dao.jdbc.Report;

public class JdbcVulnerabilityDaoTest extends DAOIntegrationTest {

	private static final String TRUNCATE = "TRUNCATE risks CASCADE";

	private JdbcVulnerabilityDao dao;
	private JdbcTemplate db;

	// Setup @Before
	@Before
	public void setup() {
		dao = new JdbcVulnerabilityDao(getDataSource());
		db = new JdbcTemplate(getDataSource());
		db.execute(TRUNCATE);
	};

	// View All Vulnerability Tests
	@Test
	public void view_all_vulnerability_reports_returns_zero_reports_when_none_are_entered() {
		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Assert.assertEquals(0, allReports.size());
	};

	@Test
	public void view_all_vulnerability_reports_not_equals() {
		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Assert.assertNotEquals(1, allReports.size());
	};

	@Test
	public void view_all_reports_returns_multiple_reports_when_multiple_are_entered() {

		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		Report report2 = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		Report report3 = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);

		dao.reportVulnerability(report);
		dao.reportVulnerability(report2);
		dao.reportVulnerability(report3);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Assert.assertEquals(3, allReports.size());
	}

	@Test
	public void view_all_reports_returns_five_reports_when_five_are_entered() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		Report report2 = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		Report report3 = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		Report report4 = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		Report report5 = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);

		dao.reportVulnerability(report);
		dao.reportVulnerability(report2);
		dao.reportVulnerability(report3);
		dao.reportVulnerability(report4);
		dao.reportVulnerability(report5);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Assert.assertEquals(5, allReports.size());
	}

	// Report Vulnerability Tests
	@Test
	public void report_vulnerability_has_correct_number() {

		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();
		Assert.assertEquals(1, allReports.size());
	}

	@Test
	public void report_vulnerability_has_correct_name_value() {

		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();
		Assert.assertEquals("Name", allReports.get(0).getName());
	}

	@Test
	public void report_vulnerability_has_null_priority() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);

		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();
		Assert.assertNull(allReports.get(0).getPriority());
	}

	@Test
	public void report_vulnerability_has_correct_reporter_value() {

		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);

		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		System.out.println(allReports.get(0).getLocation().getLocationName());

		Assert.assertEquals("Risk Reporter", allReports.get(0).getRiskReporter());

	}

	@Test
	public void report_vulnerability_has_correct_summary() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);

		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		System.out.println(allReports.get(0).getLocation().getLocationName());

		Assert.assertEquals("Summary", allReports.get(0).getSummary());

	}

	// Update Priority Tests
	@Test
	public void update_priority_test_low() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnedReport = allReports.get(0);
		dao.updateReportPriority(returnedReport, "low");

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertEquals("low", allReports.get(0).getPriority());

	}

	@Test
	public void update_priority_test_high() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnedReport = allReports.get(0);
		dao.updateReportPriority(returnedReport, "high");

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertEquals("high", allReports.get(0).getPriority());

	}

	@Test
	public void update_priority_medium() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnedReport = allReports.get(0);
		dao.updateReportPriority(returnedReport, "medium");

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertEquals("medium", allReports.get(0).getPriority());

	}

	@Test
	public void update_priority_Not_equals_test() {

		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnedReport = allReports.get(0);
		dao.updateReportPriority(returnedReport, "low");

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertNotEquals("", allReports.get(0).getPriority());

	}

	@Test
	public void update_priority_allows_for_null_priority() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnedReport = allReports.get(0);
		dao.updateReportPriority(returnedReport, null);

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertEquals(null, allReports.get(0).getPriority());

	}

	// Update is_Repaired -- tried to start true, and change to false, but DB
	// defaults to false
	@Test
	public void update_is_repaired_from_false_to_true() {

		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnReport = allReports.get(0);

		dao.updateIsRepaired(returnReport);
		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertTrue(allReports.get(0).isRepaired());
	}

	@Test
	public void update_is_repaired_twice_from_false_to_true_to_false() {

		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnReport = allReports.get(0);

		dao.updateIsRepaired(returnReport);
		dao.updateIsRepaired(returnReport);
		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertFalse(allReports.get(0).isRepaired());
	}

	@Test
	public void is_repaired_defaults_to_False() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertFalse(allReports.get(0).isRepaired());
	}

	@Test
	public void update_is_repaired_three_times_works() {

		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnReport = allReports.get(0);

		dao.updateIsRepaired(returnReport);
		dao.updateIsRepaired(returnReport);
		dao.updateIsRepaired(returnReport);

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertTrue(allReports.get(0).isRepaired());
	}

	// Update isDuplicate
	@Test
	public void duplicate_defaults_to_false() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertFalse(allReports.get(0).isDuplicate());
	}

	@Test
	public void update_changes_from_false_to_true() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnReport = allReports.get(0);

		dao.updateIsDuplicate(returnReport);
		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertTrue(allReports.get(0).isDuplicate());
	}

	@Test
	public void update_changes_twice_from_false_to_true_to_false() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnReport = allReports.get(0);

		dao.updateIsDuplicate(returnReport);
		dao.updateIsDuplicate(returnReport);
		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertFalse(allReports.get(0).isDuplicate());
	}

	@Test
	public void update_duplicate_three_times_works() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnReport = allReports.get(0);

		dao.updateIsDuplicate(returnReport);
		dao.updateIsDuplicate(returnReport);
		dao.updateIsDuplicate(returnReport);

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertTrue(allReports.get(0).isDuplicate());
	}

	// Update repairDate
	@Test
	public void repair_date_defaults_to_null() {

		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertNull(allReports.get(0).getRepairDate());
	}

	@Test
	public void repair_date_updates_from_null() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnReport = allReports.get(0);

		dao.updateRepairDate(returnReport, "repairDate");

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertNotNull(allReports.get(0).getRepairDate());
	}

	@Test
	public void repair_date_returns_correct_result_from_null() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability returnReport = allReports.get(0);

		dao.updateRepairDate(returnReport, "2019-12-12");

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertEquals("2019-12-12", allReports.get(0).getRepairDate());
	}

	@Test
	public void repair_date_updates_from_populated_value() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability vulnerabillity = allReports.get(0);

		dao.updateRepairDate(vulnerabillity, "2019-12-12");
		dao.updateRepairDate(vulnerabillity, "2019-12-20");

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertNotEquals("2019-12-12", allReports.get(0).getRepairDate());
	}

	@Test
	public void repair_date_updates_correct_value_from_populated_value() {
		Report report = makeReport("Name", "Client Name", "Location Name", "Summary", "Risk Reporter", "Image Name",
				"Location Address", null);
		dao.reportVulnerability(report);

		List<Vulnerability> allReports = dao.viewAllVulnerabilityReports();

		Vulnerability vulnerabillity = allReports.get(0);

		dao.updateRepairDate(vulnerabillity, "2019-12-12");
		dao.updateRepairDate(vulnerabillity, "2019-12-20");

		allReports = dao.viewAllVulnerabilityReports();

		Assert.assertEquals("2019-12-20", allReports.get(0).getRepairDate());
	}

	// Setup creates Report
	private Report makeReport(String name, String clientName, String locationName, String summary, String reporter,
			String imageName, String locationAddress, Date dateFiled) {
		Report report = new Report();

		report.setName(name);
		report.setClientName(clientName);
		report.setLocationName(locationName);
		report.setSummary(summary);
		report.setRiskReporter(reporter);
		report.setImageName(imageName);
		report.setLocationAddress(locationAddress);
		report.setDateFiled(dateFiled);

		return report;
	}

}
